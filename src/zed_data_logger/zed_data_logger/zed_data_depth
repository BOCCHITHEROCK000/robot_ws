import rclpy
from rclpy.node import Node
from sensor_msgs.msg import Image
from cv_bridge import CvBridge
import numpy as np

class DepthDataLogger(Node):
    def __init__(self):
        super().__init__('depth_data_logger')
        self.declare_parameter('output_file', 'zed_depth_data.txt')
        
        self.output_file = self.get_parameter('output_file').get_parameter_value().string_value
        
        self.create_subscription(
            Image,
            '/zed/zed_node/depth/depth_registered',
            self.depth_callback,
            10
        )
        
        self.timer = self.create_timer(1.0, self.timer_callback)  # 1 second interval
        self.bridge = CvBridge()
        self.depth_data = None

    def depth_callback(self, msg):
        self.depth_data = self.bridge.imgmsg_to_cv2(msg, desired_encoding='32FC1')

    def timer_callback(self):
        if self.depth_data is not None:
            # Save depth data to text file in matrix format
            np.savetxt(self.output_file, self.depth_data, fmt='%.2f', delimiter='\t', header='Depth data (in meters)')
            self.get_logger().info(f'Saved depth data to {self.output_file}')

def main(args=None):
    rclpy.init(args=args)
    node = DepthDataLogger()
    rclpy.spin(node)
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
